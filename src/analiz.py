import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt

# !!! –í–ê–ñ–õ–ò–í–û: –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É —Ç—É—Ç !!!
FILE_PATH = "src/main_df.csv" # –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —à–ª—è—Ö

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
@st.cache_data
def load_data(file_path):
    if 'dev' in os.environ['ENVIROMENT_MODE']:
        st.warning("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –ù–ú–¢ –≤–∏–º–∫–Ω–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ —Ä–æ–∑—Ä–æ–±–∫–∏. "
                   "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è ENVIROMENT_MODE —É 'prod' –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π.")
    elif 'prod' in os.environ['ENVIROMENT_MODE']:
        st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –ù–ú–¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ 'prod'.")
        import boto3
        s3 = boto3.client('s3')
        s3.download_file('nmt', 'main_df.csv', 'src/main_df.csv')

    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É."""
    if not os.path.exists(file_path):
        st.error(f"–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {file_path}")
        return None
    try:
        _, file_extension = os.path.splitext(file_path)
        if file_extension.lower() == '.csv':
            df = pd.read_csv(file_path)
        elif file_extension.lower() in ['.xls', '.xlsx']:
            df = pd.read_excel(file_path)
        else:
            st.error(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É: {file_extension}. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —à–ª—è—Ö –¥–æ CSV –∞–±–æ Excel —Ñ–∞–π–ª—É.")
            return None
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É '{file_path}': {e}")
        return None

def run_dashboard():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –¥–∞—à–±–æ—Ä–¥—É."""
    st.set_page_config(page_title="–î–∞—à–±–æ—Ä–¥ –ê–Ω–∞–ª—ñ–∑—É –ë–∞–ª—ñ–≤ –ó–ù–û", layout="wide")
    st.title("üìä –î–∞—à–±–æ—Ä–¥ –ê–Ω–∞–ª—ñ–∑—É –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ó–ù–û")

    df_original = load_data(FILE_PATH)

    if df_original is None:
        st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É: {FILE_PATH}. "
                 f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —à–ª—è—Ö—É —É –∑–º—ñ–Ω–Ω—ñ–π FILE_PATH —É –∫–æ–¥—ñ —Å–∫—Ä–∏–ø—Ç–∞ "
                 f"—Ç–∞ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–π–ª –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è.")
        st.stop()

    required_columns = ['exam_year', 'regname', 'settlement_type', 'settlement_name', 'eoname',
                        'ukrball100', 'histball100', 'mathball100']
    missing_cols = [col for col in required_columns if col not in df_original.columns]
    if missing_cols:
        st.error(f"–£ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–º—É —Ñ–∞–π–ª—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
        st.stop()

    st.sidebar.header("–§—ñ–ª—å—Ç—Ä–∏:")

    # 0. –§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–æ–∫–æ–º (exam_year)
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ (–¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è)
        years = ['–í—Å—ñ —Ä–æ–∫–∏'] + sorted(df_original['exam_year'].astype(int).unique().tolist())
    except ValueError:
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ int
        years = ['–í—Å—ñ —Ä–æ–∫–∏'] + sorted(df_original['exam_year'].astype(str).unique().tolist())
        
    selected_year = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ –ó–ù–û:", years)

    if selected_year == '–í—Å—ñ —Ä–æ–∫–∏':
        df_after_year = df_original.copy()
    else:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö
        if isinstance(selected_year, int) and pd.api.types.is_numeric_dtype(df_original['exam_year']):
             df_after_year = df_original[df_original['exam_year'] == selected_year]
        else: # –Ø–∫—â–æ —Ä–æ–∫–∏ —É —Ñ–∞–π–ª—ñ –∞–±–æ —É –≤–∏–±–æ—Ä—ñ —î —Ä—è–¥–∫–∞–º–∏
             df_after_year = df_original[df_original['exam_year'].astype(str) == str(selected_year)]

    # 1. –§—ñ–ª—å—Ç—Ä –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º (regname)
    regions = ['–í—Å—ñ'] + sorted(df_after_year['regname'].astype(str).unique().tolist())
    selected_region = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å:", regions)

    if selected_region == '–í—Å—ñ':
        df_after_region = df_after_year.copy()
    else:
        df_after_region = df_after_year[df_after_year['regname'] == selected_region]

    # 2. –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (settlement_type)
    settlement_types = ['–í—Å—ñ'] + sorted(df_after_region['settlement_type'].astype(str).unique().tolist())
    selected_settlement_type = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:", settlement_types)

    if selected_settlement_type == '–í—Å—ñ':
        df_after_settlement_type = df_after_region.copy()
    else:
        df_after_settlement_type = df_after_region[df_after_region['settlement_type'] == selected_settlement_type]
    
    # 3. –§—ñ–ª—å—Ç—Ä –∑–∞ –Ω–∞–∑–≤–æ—é –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (–≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫)
    settlement_names_options = ['–í—Å—ñ'] + sorted(df_after_settlement_type['settlement_name'].astype(str).unique().tolist())
    selected_settlement_name = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É:", settlement_names_options)

    if selected_settlement_name == '–í—Å—ñ':
        df_after_settlement_name = df_after_settlement_type.copy()
    else:
        df_after_settlement_name = df_after_settlement_type[df_after_settlement_type['settlement_name'] == selected_settlement_name]

    # 4. –§—ñ–ª—å—Ç—Ä –∑–∞ –Ω–∞–∑–≤–æ—é –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É (–≤–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫)
    school_names_options = ['–í—Å—ñ'] + sorted(df_after_settlement_name['eoname'].astype(str).unique().tolist())
    selected_school = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ (–ó–û):", school_names_options)

    if selected_school == '–í—Å—ñ':
        final_filtered_df = df_after_settlement_name.copy()
    else:
        final_filtered_df = df_after_settlement_name[df_after_settlement_name['eoname'] == selected_school]
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±—ñ–≤
    tab1_title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ó–ù–û" 
    tab1, = st.tabs([tab1_title])

    with tab1:
        st.header(tab1_title)
        st.markdown("---")
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

        if final_filtered_df.empty:
            st.warning("–ó–∞ –æ–±—Ä–∞–Ω–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –¥–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        else:
            st.write(f"–ó–Ω–∞–π–¥–µ–Ω–æ **{len(final_filtered_df)}** –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏.")

            st.markdown("### üìä –ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏")
            score_cols = ['ukrball100', 'histball100', 'mathball100']
            
            df_for_stats = final_filtered_df.copy()
            for col in score_cols:
                df_for_stats[col] = pd.to_numeric(df_for_stats[col], errors='coerce')

            stats_df = df_for_stats[score_cols].dropna(subset=score_cols, how='all')

            if stats_df.empty or all(stats_df[col].isnull().all() for col in score_cols):
                st.warning("–ù–µ–º–∞—î —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª—ñ–≤ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è.")
            else:
                st.write("–û–ø–∏—Å–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ —Ä–∞–∑–æ–º):")
                st.dataframe(stats_df.describe().T.rename(columns={
                    'count': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'mean': '–°–µ—Ä–µ–¥–Ω—î', 'std': '–°—Ç–∞–Ω–¥. –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è',
                    'min': '–ú—ñ–Ω.', '25%': '25-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å', '50%': '–ú–µ–¥—ñ–∞–Ω–∞ (50-–π –ø–µ—Ä—Ü.)',
                    '75%': '75-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å', 'max': '–ú–∞–∫—Å.'
                }))

                st.markdown("---")
                st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –ö–æ–∂–Ω–æ–º—É –ü—Ä–µ–¥–º–µ—Ç—É")
                
                subject_map = {
                    'ukrball100': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ —Ç–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞',
                    'histball100': 'üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏',
                    'mathball100': 'üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
                }
                
                cols_display = st.columns(len(subject_map))

                for i, (col_name, subject_title) in enumerate(subject_map.items()):
                    with cols_display[i]:
                        st.markdown(f"##### {subject_title} (`{col_name}`)")
                        subject_data = stats_df[[col_name]].dropna()
                        if not subject_data.empty:
                            st.write("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                            st.dataframe(subject_data.describe().T.rename(columns={
                                'count': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', 'mean': '–°–µ—Ä–µ–¥–Ω—î', 'std': '–°—Ç–∞–Ω–¥. –≤—ñ–¥—Ö.',
                                'min': '–ú—ñ–Ω.', '25%': 'Q1', '50%': '–ú–µ–¥—ñ–∞–Ω–∞', '75%': 'Q3', 'max': '–ú–∞–∫—Å.'
                            }), height=150)

                            st.write("–†–æ–∑–ø–æ–¥—ñ–ª –±–∞–ª—ñ–≤ (–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞):")
                            fig_hist, ax_hist = plt.subplots(figsize=(6, 4))
                            ax_hist.hist(subject_data[col_name], bins='auto', edgecolor='black', color='blue')
                            ax_hist.set_xlabel('–ë–∞–ª–∏')
                            ax_hist.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤')
                            ax_hist.grid(axis='y', alpha=0.75)
                            plt.tight_layout()
                            st.pyplot(fig_hist)
                            plt.close(fig_hist)
                        else:
                            st.info("–î–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
                
                st.markdown("---")
                st.subheader("–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –†–æ–∑–ø–æ–¥—ñ–ª –ë–∞–ª—ñ–≤ –∑–∞ –ü—Ä–µ–¥–º–µ—Ç–∞–º–∏ (–ë–æ–∫—Å-–ø–ª–æ—Ç)")
                
                plot_data_boxplot = stats_df.dropna(axis=1, how='all') 
                
                if not plot_data_boxplot.empty:
                    fig_box, ax_box = plt.subplots(figsize=(10, 6))
                    plot_data_boxplot.plot(kind='box', ax=ax_box, patch_artist=True)
                    ax_box.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –±–∞–ª—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏')
                    ax_box.set_ylabel('–ë–∞–ª–∏')
                    ax_box.set_xticklabels([subject_map.get(col, col) for col in plot_data_boxplot.columns], rotation=0)
                    ax_box.grid(axis='y', alpha=0.75)
                    st.pyplot(fig_box)
                    plt.close(fig_box)
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–æ–≥–æ –±–æ–∫—Å-–ø–ª–æ—Ç—É.")

            st.markdown("---")
            st.subheader("üìú –ü–µ—Ä–µ–≥–ª—è–¥ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –î–∞–Ω–∏—Ö (–ø–µ—Ä—à—ñ 100 –∑–∞–ø–∏—Å—ñ–≤)")
            st.dataframe(final_filtered_df.head(100))

if __name__ == "__main__":
    plt.style.use('seaborn-v0_8-whitegrid')
    run_dashboard()