import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
# import datetime # Not explicitly used in the provided snippet, but can be kept if needed elsewhere

st.set_page_config(layout="wide", page_title="–î–∞—à–±–æ—Ä–¥–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")


@st.cache_data  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä Streamlit –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
def load_and_preprocess_data(file_path):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ CSV —Ñ–∞–π–ª—É, –≤–∏–∫–æ–Ω—É—î –ø–æ—á–∞—Ç–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é –¥–∞—Ç)
    —Ç–∞ –∫–µ—à—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        df = pd.read_csv(file_path)
        # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑
        if 'testdate' in df.columns:
            df['testdate'] = pd.to_datetime(df['testdate'], errors='coerce')
        # –°—é–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à—É —Å—Ç–∞—Ç–∏—á–Ω—É –æ–±—Ä–æ–±–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è main_df
        return df
    except FileNotFoundError:
        st.error(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É.")
        st.stop()  # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–±–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ–π –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∑ '{file_path}': {e}")
        st.stop() # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∏ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–æ–±—Ä–æ–±–∫–∏

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–µ—à–æ–≤–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó ---
# –¢–µ–ø–µ—Ä –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ pd.read_csv, –º–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à—É –∫–µ—à–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é:
main_df = load_and_preprocess_data('src/main_df.csv')

# --- –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ) ---
# –§—É–Ω–∫—Ü—ñ—è load_and_preprocess_data –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î st.stop() —É –≤–∏–ø–∞–¥–∫—É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫.
# –¶—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ—é, —è–∫—â–æ CSV —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞–ª–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è.
if main_df.empty:
    st.warning("–£–≤–∞–≥–∞: –§–∞–π–ª –¥–∞–Ω–∏—Ö ('src/main_df.csv') –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∞–ª–µ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π (–Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—ñ–≤). –î–µ—è–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–∞—à–±–æ—Ä–¥—É –º–æ–∂—É—Ç—å –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ.")
    # –†–æ–∑–≥–ª—è–Ω—å—Ç–µ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ç st.stop(), —á–∏ –¥–∞—à–±–æ—Ä–¥ –º–æ–∂–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É,
    # –ø–æ–∫–∞–∑—É—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö" —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö.


st.title("üöÄ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –¥–∞—à–±–æ—Ä–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
st.markdown("–û–≥–ª—è–¥ –¥–∞–Ω–∏—Ö –º–∏–Ω—É–ª–∏—Ö —Ä–æ–∫—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä–∏ –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ –¥–ª—è –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó.")


# --- Sidebar Filters ---
st.sidebar.header("‚öôÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏")

# Ensure main_df columns are available before using them for filters
if 'exam_year' not in main_df.columns or 'regname' not in main_df.columns:
    st.sidebar.error("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ ('exam_year', 'regname') –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ –¥–∞–Ω–∏—Ö.")
    st.stop()

selected_exam_year = st.sidebar.multiselect(
    "–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ —ñ—Å–ø–∏—Ç—É:",
    options=sorted(main_df['exam_year'].unique(), reverse=True),
    default=list(sorted(main_df['exam_year'].unique())) # Ensure default is a list
)

unique_regions = sorted(main_df['regname'].unique())
selected_region = st.sidebar.multiselect(
    "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:",
    options=unique_regions,
    default=[] 
)

# --- Filter Data ---
filtered_df = main_df.copy()
if selected_exam_year:
    filtered_df = filtered_df[filtered_df['exam_year'].isin(selected_exam_year)]
if selected_region: 
    filtered_df = filtered_df[filtered_df['regname'].isin(selected_region)]

# --- CENTRALIZED '–í—ñ–∫' (AGE) CALCULATION ---
age_calculation_possible = True
if not filtered_df.empty:
    if 'birth' in filtered_df.columns and 'exam_year' in filtered_df.columns:
        birth_years = pd.to_numeric(filtered_df['birth'], errors='coerce')
        exam_years_numeric = pd.to_numeric(filtered_df['exam_year'], errors='coerce')
        # Add '–í—ñ–∫' column to filtered_df
        filtered_df['–í—ñ–∫'] = exam_years_numeric - birth_years
    else:
        st.sidebar.warning("–ö–æ–ª–æ–Ω–∫–∏ 'birth' –∞–±–æ 'exam_year' –≤—ñ–¥—Å—É—Ç–Ω—ñ. –í—ñ–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–µ –±—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
        # Add an empty '–í—ñ–∫' column with NaN to prevent KeyErrors if plots expect it
        filtered_df['–í—ñ–∫'] = np.nan 
        age_calculation_possible = False
else:
    # If filtered_df is empty, still ensure '–í—ñ–∫' column exists if other code expects it
    if '–í—ñ–∫' not in filtered_df.columns:
         filtered_df['–í—ñ–∫'] = pd.Series(dtype='float64')


# --- Main Page Content ---
if filtered_df.empty and not (selected_exam_year or selected_region): # Check if empty due to no data initially
    st.warning("üòî –í—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—ñ–≤.")
elif filtered_df.empty: # Empty due to filters
    st.warning("üòî –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.")
else:
    tab1, tab2, tab3, tab4 = st.tabs([
        "üßë‚Äçü§ù‚Äçüßë –î–µ–º–æ–≥—Ä–∞—Ñ—ñ—è",
        "üìà –¢–µ–Ω–¥–µ–Ω—Ü—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
        "üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è",
        "üè´ –ó–∞–∫–ª–∞–¥–∏ —Ç–∞ –ø—É–Ω–∫—Ç–∏"
    ])

    # --- 1. –î–µ–º–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –æ–≥–ª—è–¥ ---
    with tab1:
        st.header("üßë‚Äçü§ù‚Äçüßë –î–µ–º–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –æ–≥–ª—è–¥ —É—á–∞—Å–Ω–∏–∫—ñ–≤")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Å—Ç–∞—Ç—Ç—é (`sextypename`)")
            if 'sextypename' in filtered_df.columns and not filtered_df['sextypename'].dropna().empty:
                gender_counts = filtered_df['sextypename'].value_counts().reset_index()
                gender_counts.columns = ['–°—Ç–∞—Ç—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                fig_gender = px.pie(gender_counts, values='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', names='–°—Ç–∞—Ç—å', title="–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∑–∞ —Å—Ç–∞—Ç—Ç—é", hole=0.3)
                fig_gender.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig_gender, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ —Å—Ç–∞—Ç—Ç—é.")

            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (`settlement_type`)")
            if 'settlement_type' in filtered_df.columns and not filtered_df['settlement_type'].dropna().empty:
                settlement_counts = filtered_df['settlement_type'].value_counts().reset_index()
                settlement_counts.columns = ['–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                fig_settlement = px.bar(settlement_counts, x='–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                        title="–£—á–∞—Å–Ω–∏–∫–∏ –∑–∞ —Ç–∏–ø–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É", color='–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É',
                                        labels={'–ö—ñ–ª—å–∫—ñ—Å—Ç—å':'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤'})
                st.plotly_chart(fig_settlement, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ —Ç–∏–ø–æ–º –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É.")

        with col2: # Ensure this is the ONLY 'with col2:' block in tab1
            st.subheader("–í—ñ–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª (–Ω–∞ –æ—Å–Ω–æ–≤—ñ `birth` —Ç–∞ `exam_year`)")
            if age_calculation_possible and '–í—ñ–∫' in filtered_df.columns and not filtered_df['–í—ñ–∫'].isnull().all():
                # Use a copy for plotting to handle NaNs and type conversion locally
                age_plot_data = filtered_df.dropna(subset=['–í—ñ–∫']).copy()
                if not age_plot_data.empty:
                    age_plot_data['–í—ñ–∫'] = age_plot_data['–í—ñ–∫'].astype(int)
                    fig_age = px.histogram(age_plot_data, x='–í—ñ–∫', nbins=30, title="–†–æ–∑–ø–æ–¥—ñ–ª —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ –≤—ñ–∫–æ–º", marginal="box")
                    st.plotly_chart(fig_age, use_container_width=True)
                else:
                    st.info("–ù–µ–º–∞—î –¥—ñ–π—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–∫–æ–≤–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏.")
            elif not age_calculation_possible:
                 st.info("–í—ñ–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ 'birth' –∞–±–æ 'exam_year' –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–∫–æ–≤–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É.")

            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º (`regname`)")
            if 'regname' in filtered_df.columns and not filtered_df['regname'].dropna().empty:
                region_counts = filtered_df['regname'].value_counts().reset_index()
                region_counts.columns = ['–†–µ–≥—ñ–æ–Ω', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                fig_region = px.bar(region_counts.sort_values('–ö—ñ–ª—å–∫—ñ—Å—Ç—å', ascending=False),
                                    x='–†–µ–≥—ñ–æ–Ω', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö", color='–†–µ–≥—ñ–æ–Ω')
                st.plotly_chart(fig_region, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ —Ä–µ–≥—ñ–æ–Ω–æ–º.")
    
    # --- 2. –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---
    with tab2:
        st.header("üìà –ê–Ω–∞–ª—ñ–∑ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ–π —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—É–≤–∞–Ω—å –∑–∞ —Ä–æ–∫–∞–º–∏ (`exam_year`)")
            if 'exam_year' in main_df.columns and not main_df['exam_year'].dropna().empty:
                yearly_tests_all_data = main_df['exam_year'].value_counts().sort_index().reset_index()
                yearly_tests_all_data.columns = ['–†—ñ–∫', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                fig_yearly_tests = px.line(yearly_tests_all_data, x='–†—ñ–∫', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', markers=True, title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–µ—Å—Ç—É–≤–∞–Ω—å –ø–æ —Ä–æ–∫–∞—Ö")
                fig_yearly_tests.update_xaxes(type='category') 
                st.plotly_chart(fig_yearly_tests, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö 'exam_year' –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –ø–æ —Ä–æ–∫–∞—Ö.")

            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (`regtypename`)")
            if 'regtypename' in filtered_df.columns and not filtered_df['regtypename'].dropna().empty:
                regtype_counts = filtered_df['regtypename'].value_counts().reset_index()
                regtype_counts.columns = ['–¢–∏–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                fig_regtype = px.bar(regtype_counts, x='–¢–∏–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                     title="–£—á–∞—Å–Ω–∏–∫–∏ –∑–∞ —Ç–∏–ø–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", color='–¢–∏–ø —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
                st.plotly_chart(fig_regtype, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö 'regtypename' –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∑–∞ —Ç–∏–ø–æ–º —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")

        with col2:
            st.subheader("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—É–≤–∞–Ω—å –∑–∞ –¥–∞—Ç–æ—é (`testdate`)")
            if 'testdate' in filtered_df.columns and not filtered_df['testdate'].dropna().empty:
                # Ensure 'testdate' is datetime
                if pd.api.types.is_datetime64_any_dtype(filtered_df['testdate']):
                    daily_tests = filtered_df.groupby(filtered_df['testdate'].dt.date).size().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                    daily_tests.columns = ['–î–∞—Ç–∞', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
                    fig_daily_tests = px.line(daily_tests, x='–î–∞—Ç–∞', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', markers=True, title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—É–≤–∞–Ω—å –∑–∞ –¥–Ω—è–º–∏ (–¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)")
                    st.plotly_chart(fig_daily_tests, use_container_width=True)
                else:
                    st.info("–ö–æ–ª–æ–Ω–∫–∞ 'testdate' –Ω–µ —î —Ç–∏–ø–æ–º datetime. –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–≥—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é.")
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö 'testdate' –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó –¥–∏–Ω–∞–º—ñ–∫–∏.")

            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Å—Ç–∞—Ç—Ç—é –ø–æ —Ä–æ–∫–∞—Ö (—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ)")
            if 'exam_year' in filtered_df.columns and 'sextypename' in filtered_df.columns and \
               not filtered_df[['exam_year', 'sextypename']].dropna().empty:
                gender_by_year = filtered_df.groupby(['exam_year', 'sextypename']).size().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                if not gender_by_year.empty:
                    fig_gender_year = px.bar(gender_by_year, x='exam_year', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', color='sextypename',
                                             barmode='group', title="–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Å—Ç–∞—Ç—Ç—é –ø–æ —Ä–æ–∫–∞—Ö (–¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)",
                                             labels={'exam_year':'–†—ñ–∫ —ñ—Å–ø–∏—Ç—É', 'sextypename':'–°—Ç–∞—Ç—å'})
                    fig_gender_year.update_xaxes(type='category')
                    st.plotly_chart(fig_gender_year, use_container_width=True)
                else:
                    st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Å—Ç–∞—Ç—ñ –ø–æ —Ä–æ–∫–∞—Ö.")
            else:
                st.info("–í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ 'exam_year' –∞–±–æ 'sextypename' –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Å—Ç–∞—Ç—ñ –ø–æ —Ä–æ–∫–∞—Ö.")
                
    # --- 3. –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ ---
    with tab3:
        st.header("üó∫Ô∏è –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑")
        # ... (Your existing code for tab3, ensure checks for column existence and empty data) ...
        # Example for one plot in tab3:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("–£—á–∞—Å–Ω–∏–∫–∏ –∑–∞ —Ç–∏–ø–æ–º –Ω.–ø. –≤ —Ä–æ–∑—Ä—ñ–∑—ñ —Ä–µ–≥—ñ–æ–Ω—ñ–≤ (`regname`, `settlement_type`)")
            if 'regname' in filtered_df.columns and 'settlement_type' in filtered_df.columns and \
               not filtered_df[['regname', 'settlement_type']].dropna().empty:
                region_settlement_counts = filtered_df.groupby(['regname', 'settlement_type']).size().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                if not region_settlement_counts.empty:
                    fig_region_settlement = px.bar(region_settlement_counts, x='regname', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                                   color='settlement_type', title="–†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—ñ–≤ –Ω.–ø. –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö",
                                                   labels={'regname':'–†–µ–≥—ñ–æ–Ω', 'settlement_type':'–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É'},
                                                   category_orders={"regname": region_settlement_counts.groupby('regname')['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].sum().sort_values(ascending=False).index.tolist()})
                    st.plotly_chart(fig_region_settlement, use_container_width=True)
                else:
                    st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∏–ø—ñ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö.")
            else:
                st.info("–í—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ 'regname' –∞–±–æ 'settlement_type' –¥–ª—è —Ü—å–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.")
        # Add similar checks for other plots in tab3 and tab4

    # --- 4. –ê–Ω–∞–ª—ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ —Ç–∞ –∑–∞–∫–ª–∞–¥—ñ–≤ ---
    with tab4:
        st.header("üè´ –ê–Ω–∞–ª—ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤")
        # ... (Your existing code for tab4, ensure checks for column existence and empty data) ...

    # --- Sidebar Footer ---
    st.sidebar.markdown("---")
    st.sidebar.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è **{filtered_df.shape[0]:,}** –∑–∞–ø–∏—Å—ñ–≤ –∑ **{main_df.shape[0]:,}** –∑–∞–≥–∞–ª—å–Ω–∏—Ö.")
    st.sidebar.markdown("‚ÑπÔ∏è *–î–∞–Ω—ñ –≤–∏–¥—ñ–ª–µ–Ω—ñ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–∞–Ω–∏—Ö –£–¶–û–Ø–û 2016-2024 —Ä–æ–∫—ñ–≤*")
    st.sidebar.markdown("üîó [–î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö](https://testportal.gov.ua/)")